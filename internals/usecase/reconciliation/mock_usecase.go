// Code generated by mockery v2.45.0. DO NOT EDIT.

package reconciliation

import (
	context "context"

	model "github.com/bagusandrian/reconciliation-service/internals/model"
	mock "github.com/stretchr/testify/mock"
)

// MockUsecase is an autogenerated mock type for the Usecase type
type MockUsecase struct {
	mock.Mock
}

// ReconciliationComparition provides a mock function with given fields: ctx, req
func (_m *MockUsecase) ReconciliationComparition(ctx context.Context, req model.ReconciliationRequest) (model.ReconciliationResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ReconciliationComparition")
	}

	var r0 model.ReconciliationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ReconciliationRequest) (model.ReconciliationResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.ReconciliationRequest) model.ReconciliationResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.ReconciliationResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.ReconciliationRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockUsecase creates a new instance of MockUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsecase {
	mock := &MockUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
